package com.lamp.controller;

import com.lamp.common.MenuModelCommon;
import com.lamp.common.SystemOperationCommon;
import com.lamp.model.TLightStrategyManage;
import com.lamp.model.TPlanStategy;
import com.lamp.model.Tsysuser;
import com.lamp.service.IBaseDeviceService;
import com.lamp.service.PlanManageService;
import com.lamp.service.TUserOperationService;
import com.lamp.utils.PlatformUtils;
import net.sf.json.JSONArray;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.*;

/**
 * 计划策略模块
 */
@Controller
public class PlanManageController {

    @Autowired
    private PlanManageService planManageService;

    @Autowired
    private TUserOperationService tUserOperationService;

    @Autowired
    private IBaseDeviceService iBaseDeviceService;
    /** ------------------------------ 分组管理 begin ----------------------------------------*/

    @RequestMapping("planaa")
    public void aa1(){
        Date date = new Date();
        planManageService.groupLampTask(date);
    }

    /**
     * 分组管理页面初始化数据
     */
    @RequestMapping("getPlanGroupManage")
    public ModelAndView getPlanGroupManage(Integer areaId){
        List<Map<String, Object>> areaList =  planManageService.getAreas();
        List<Map<String, Object>> groupList = planManageService.getplanGroup(areaId);
        ModelAndView mv = new ModelAndView();
        mv.addObject("areaList",areaList);
        mv.addObject("groupList",groupList);
        mv.addObject("selAreaId",areaId);
        mv.setViewName("plan_group_manage");
        return mv;
    }

    /**
     * 获取分组管理页面数据
     * @param areaId
     * @param response
     * @throws IOException
     */
    @RequestMapping("ajaxGetPlanGroupManage")
    public void ajaxGetPlanGroupManage(Integer areaId,HttpServletResponse response) throws IOException{
        List<Map<String, Object>> groupList = planManageService.getplanGroup(areaId);
        String data = JSONArray.fromObject(groupList).toString();
        response.getWriter().println(data);
    }

    /**
     * 保存分组信息
     */
    @RequestMapping("savePlanGroup")
    public void savePlans(Integer id,Integer areaId,String groupName,HttpServletResponse response,HttpServletRequest request) throws IOException{
        Tsysuser tsysuser = PlatformUtils.getLoginUser(request);
        boolean result = false;
        if(null == id){
             result = planManageService.addPlanGroup(groupName,areaId);
                int i = result==true?1:0;
            tUserOperationService.recordOperationData(groupName,null,tsysuser.getId(), SystemOperationCommon.OPERATION_ADD,i, MenuModelCommon.PLANGROUP_MANAGE);
        }else{
            Object nowobj = planManageService.getPlanGroupById(id).get(0);
            result = planManageService.updPlanGroup(groupName,areaId,id);
            Object oldobj = planManageService.getPlanGroupById(id).get(0);
            int i = result==true?1:0;
            tUserOperationService.recordOperationData(nowobj,oldobj,tsysuser.getId(), SystemOperationCommon.OPERATION_UPDATE,i, MenuModelCommon.PLANGROUP_MANAGE);
        }
        String msg = result == true ? "y" : "n";
        response.getWriter().println(msg);

    }

    /**
     * 删除计划分组信息
     */
    @RequestMapping("delPlanGroup")
    public void delPlanById(Integer id,HttpServletResponse response,HttpServletRequest request) throws IOException {
        Tsysuser tsysuser = PlatformUtils.getLoginUser(request);
        boolean isOk = planManageService.delPlans(id);
        int i = isOk==true?1:0;
        Object oldobj = planManageService.getPlanGroupById(id).get(0);
        tUserOperationService.recordOperationData(null,oldobj,tsysuser.getId(), SystemOperationCommon.OPERATION_DELETE,i, MenuModelCommon.PLANGROUP_MANAGE);
        String result = "y";
        if(!isOk){
            result = "n";
        }
        response.getWriter().println(result);
    }

    /**
     * 根据区域获取路段
     */
    @RequestMapping("getPlanRoadByAreaId")
    public void getPlanRoadByAreaId(Integer areaId,HttpServletResponse response) throws IOException {
        List<Map<String, Object>> roadList = planManageService.getPlanRoadByAreaId(areaId);
        String data = JSONArray.fromObject(roadList).toString();
        response.getWriter().println(data);
    }

    /**
     * 根据路段ID获取数据
     * @param roadId
     * @param response
     * @throws IOException
     */
    @RequestMapping("getConCernDataByRoadId")
    public void getConCernDataByRoadId(Integer roadId,Integer groupId,HttpServletResponse response) throws IOException{
        List<List<Map<String, Object>>> dataList = new ArrayList<List<Map<String, Object>>>();
        List<Map<String, Object>> roadList = planManageService.getConCernDataByRoadId(roadId,groupId);
        List<Map<String, Object>> selGroupList = planManageService.getSelGroupData(roadId,groupId);
        dataList.add(roadList);
        dataList.add(selGroupList);
        String data = JSONArray.fromObject(dataList).toString();
        response.getWriter().println(data);
    }

    /**
     *  根据分组ID查找 相应的分组信息
     */
    @RequestMapping("getSelGroupByAreaId")
    public void getSelGroupByAreaId(Integer groupId,HttpServletResponse response) throws IOException {
        List<Map<String, Object>> selGroupList = planManageService.getSelGroupData(null,groupId);
        String data = JSONArray.fromObject(selGroupList).toString();
        response.getWriter().println(data);
    }

    /**
     * 保存选择的分组信息
     */
    @RequestMapping("savePlanGroupSelGroupData")
    public void saveSelGroupData(String data,HttpServletResponse response) throws IOException{
        JSONArray jsonArray = JSONArray.fromObject(data);
        List<Map<String, Object>> list  = new ArrayList<Map<String, Object>>();
        for (int i = 0;i < jsonArray.size();i++){
            Map<String,Object> dataMap = new HashMap<String,Object>();
            Map map = (Map)jsonArray.get(i);
            dataMap.put("concen_id",map.get("concen_id"));
            dataMap.put("controller_id",map.get("controller_id"));
            dataMap.put("lamp_id",map.get("lamp_id"));
            dataMap.put("is_work",map.get("is_work"));
            dataMap.put("group_id",map.get("group_id"));
            dataMap.put("road_id",map.get("road_id"));
            list.add(dataMap);
        }
        String groupIdObj = list.get(0).get("group_id").toString();
        Integer groupId = Integer.parseInt(groupIdObj);
        planManageService.deleteSelDataByGroupId(groupId);
        boolean isOk = planManageService.batchAdd(list);
        String msg = isOk == true ? "y":"n";
        response.getWriter().println(msg);
    }

    /**
     * 根据分组ID 获取分组相关信息
     * @param planId
     * @param response
     * @throws IOException
     */
    @RequestMapping("getDetailByPlanId")
    public void getDetailByPlanId(Integer planId,HttpServletResponse response) throws IOException{
        List<Map<String, Object>> list =  planManageService.getDetailByPlanId(planId);
        String data = JSONArray.fromObject(list).toString();
        response.getWriter().println(data);
    }

    /** ------------------------------ 分组管理 end ----------------------------------------*/

    /** ------------------------------ 场景管理 begin --------------------------------------*/

    /**
     * 初始化场景数据
     */
    @RequestMapping("getPlanSenceManage")
    public ModelAndView getPlanSenceManage(){
        List<Map<String, Object>> areaList =  planManageService.getAreas();
        List<Map<String, Object>> senceList = planManageService.getPlanSenceManage(null,null);
        ModelAndView mv = new ModelAndView();
        mv.addObject("areaList",areaList);
        mv.addObject("senceList",senceList);
        mv.setViewName("plan_scene_manage");
        return mv;
    }

    @RequestMapping("getAllplanGroupData")
    public void getAllplanGroup(HttpServletRequest request,HttpServletResponse response) throws IOException{
        String orgCode = PlatformUtils.getLoginUser(request).getTorganization().getOrgCode();
        List<Map<String, Object>> list = planManageService.getAllplanGroup(orgCode);
        System.out.println(list.get(0).get("group_name"));
        System.out.println(list.size());
        response.getWriter().print(JSONArray.fromObject(list).toString());
    }
    /**
     * 获取场景数据
     */
    @RequestMapping("ajaxGetPlanSenceManage")
    public void ajaxGetPlanSenceManage(Integer areaId,Integer groupId,HttpServletResponse response) throws IOException{
        List<Map<String, Object>> list = planManageService.getPlanSenceManage(areaId,groupId);
        String data = JSONArray.fromObject(list).toString();
        response.getWriter().println(data);
    }

    /**
     * 根据区域ID获取分组信息
     */
    @RequestMapping("getPlanGroupIdByAreaId")
    public void getPlanGroupIdByAreaId(Integer areaId,HttpServletResponse response) throws IOException{
        List<Map<String, Object>> groupList = planManageService.getplanGroup(areaId);
        String data = JSONArray.fromObject(groupList).toString();
        response.getWriter().println(data);
    }

    /**
     * 保存场景信息
     */
    @RequestMapping("savePlanSenceData")
    public ModelAndView savePlanSenceData(String cname,Integer id,Integer groupId,Integer test_light){
        if(null == id){
            boolean isOk = planManageService.savePlanSenceData(cname,0,groupId,test_light);
        } else {
            planManageService.updateSenceData(id,cname,test_light);
        }
        return getPlanSenceManage();
    }

    /**
     * 删除场景
     */
    @RequestMapping("deletePlanSenceData")
    public void deletePlanSenceData(Integer id,HttpServletResponse response) throws IOException{
       boolean isOk =  planManageService.deletePlanSenceData(id);
       String msg = isOk == true ? "y":"n";
       response.getWriter().println(msg);
    }

    /**
     * 获取 场景控制器执行情况
     * @param id
     * @param response
     * @throws IOException
     */
    @RequestMapping("getPlanSenceExecuteStand")
    public void getExecuteStand(Integer id,HttpServletResponse response) throws IOException{
        List<Map<String, Object>> groupList =  planManageService.getExecuteStand(id);
        String data = JSONArray.fromObject(groupList).toString();
        response.getWriter().println(data);
    }

    /** ------------------------------ 场景管理 end --------------------------------------*/

    /** ------------------------------ 分组策略 start -------------------------------------*/

    /**
     *
     *  初始化 分组策略信息
     */
    @RequestMapping("getPlanStrategyData")
    public ModelAndView getPlanStrategyData(HttpServletRequest request){
        String orgCode = PlatformUtils.getLoginUser(request).getTorganization().getOrgCode();
        List<Map<String, Object>> areaList =  planManageService.getAreasByOrgCode(orgCode);
        List<Map<String, Object>> strategyList = planManageService.getPlanstrategyData(orgCode);
        List<Map<String, Object>> contentList = planManageService.getPlanContent();
        ModelAndView mv = new ModelAndView();
        mv.addObject("areaList",areaList);
        mv.addObject("strategyList",strategyList);
        mv.addObject("contentList",contentList);
        mv.setViewName("PlanStrategyManage");
        return mv;
    }

    /**
     * 删除计划
     * @param id
     */
    @RequestMapping("deltePlanStrategyById")
    public void deltePlanStrategyById(Integer id,HttpServletResponse response) throws IOException{
        boolean result = planManageService.deltePlanStrategyById(id);
        String msg = result == true ? "y" : "n";
        response.getWriter().println(msg);
    }

    /**
     * 保存分组策略计划信息
     */
    @RequestMapping("savePlanStrategyData")
    public void savePlanStrategyData(TPlanStategy ts,HttpServletResponse response,HttpServletRequest request) throws IOException{
        Tsysuser user = PlatformUtils.getLoginUser(request);
        ts.setCreateby(user.getId());
        ts.setCreateTime(PlatformUtils.getNowTime());
        boolean result = false;
        if(null == ts.getId()){
            result = planManageService.savePlanStrategyData(ts);
            int i = result==true?1:0;
            Object nowobj = planManageService.getPlanStragegyById(ts.getId()).get(0);
            tUserOperationService.recordOperationData(nowobj,null,user.getId(), SystemOperationCommon.OPERATION_ADD,i,MenuModelCommon.GROUPSTRATEMANAGE);
        } else {
            result = planManageService.updatePlanStragegyById(ts);
        }
        String msg = result == true ? "y" : "n";
        response.getWriter().println(msg);
    }

    /**
     *  查询所有分组计划信息
     */
    @RequestMapping("ajaxSePlanStrategyData")
    public void ajaxSePlanStrategyData(Integer areaId,Integer groupId,HttpServletResponse response) throws IOException{
        List<Map<String, Object>> areaList = planManageService.ajaxSePlanStrategyData(areaId,groupId);
        String data = JSONArray.fromObject(areaList).toString();
        response.getWriter().println(data);
    }

    /**
     * 根据主键获取计划信息
     * @param id 主键
     */
    @RequestMapping("getPlanStragegyById")
    public void getPlanStragegyById(Integer id,HttpServletResponse response) throws IOException{
        List<Map<String, Object>> stragegyList =  planManageService.getPlanStragegyById(id);
        String data = JSONArray.fromObject(stragegyList).toString();
        response.getWriter().println(data);
    }

    /**
     * 根据策略计划主键查找详细信息和集中器名称
     * @param id 主键
     * @param response
     * @throws IOException
     */
    @RequestMapping("getConcentratorByStragegyId")
    public void getConcentratorByStragegyId(Integer id,HttpServletResponse response) throws IOException{
        List<Map<String, Object>> stragegyList =  planManageService.getConcentratorByStragegyId(id);
        String data = JSONArray.fromObject(stragegyList).toString();
        response.getWriter().println(data);
    }

    /** ------------------------------ 分组策略 end -------------------------------------*/

    /** ------------------------------ 灯离线策略 start ----------------------------------*/

    /**
     *
     *  初始化 灯离线策略
     */
    @RequestMapping("getPlanLightStrategyData")
    public ModelAndView getPlanLightStrategyData(){
        List<Map<String, Object>> areaList =  planManageService.getAreas();
        List<Map<String, Object>> contentList = planManageService.getLightContent();
        ModelAndView mv = new ModelAndView();
        mv.addObject("areaList",areaList);
        mv.addObject("contentList",contentList);
        mv.setViewName("PlanLightLeaveStrategy");
        return mv;
    }

    /**
     *  根据区域ID获取所属路段
     */
    @RequestMapping("getRoadByAreaId")
    public void getRoadByAreaId(Integer id,HttpServletResponse response) throws IOException {
        List<Map<String, Object>> list =  planManageService.getRoadByAreaId(id);
        String data = JSONArray.fromObject(list).toString();
        response.getWriter().println(data);
    }

    /**
     * 根据路段ID获取所属灯具
     */
    @RequestMapping("getLampByRoadId")
    public void getLampByRoadId(Integer id,HttpServletResponse response) throws IOException{
        List<Map<String, Object>> list = planManageService.getLampByRoadId(id);
        String data = JSONArray.fromObject(list).toString();
        response.getWriter().println(data);
    }

    /**
     * 根据灯具ID获取相关离线数据
     * @param lampId
     * @param response
     * @throws IOException
     */
    @RequestMapping("getLampStrategyByLampId")
    public void getLampStrategyByLampId(HttpServletRequest request,Integer lampId,HttpServletResponse response) throws IOException{
        List<Map<String, Object>> list = planManageService.getLampStrategyByLampId(request,lampId);
        String data = JSONArray.fromObject(list).toString();
        response.getWriter().println(data);
    }

    /**
     *  保存策略
     */
    @RequestMapping("saveLampStrategyData")
    public void saveLampStrategyData(HttpServletRequest request,TLightStrategyManage tm,HttpServletResponse response) throws IOException{
        Integer dimming = tm.getDimming();
        if(null == dimming){
            tm.setDimming(0);
        }
        boolean result = false;
        if(null == tm.getId()){
            /*获取用户信息*/
            Tsysuser tsysuser1 = PlatformUtils.getLoginUser(request);
            tm.setCreateby(tsysuser1.getId());
            tm.setCreateTime(PlatformUtils.getNowTime());
           result =  planManageService.saveLampStrategyData(tm);
        } else {
            result =  planManageService.updateLampStrategy(tm);
        }
        String msg = result == true ? "y" : "n";
        response.getWriter().println(msg);
    }

    /**
     * 删除灯离线计划
     */
    @RequestMapping("delLampStrategyData")
    public void delLampStrategyData(Integer id,HttpServletResponse response) throws IOException{
        boolean  result =  planManageService.delLampStrategyData(id);
        String msg = result == true ? "y" : "n";
        response.getWriter().print(msg);
    }

    /**
     *  根据主键获取灯离线数据
     */
    @RequestMapping("getLampStrategyById")
    public void getLampStrategyById(Integer id,HttpServletResponse response) throws IOException{
        List<Map<String, Object>> list =  planManageService.getLampStrategyById(id);
        String data = JSONArray.fromObject(list).toString();
        response.getWriter().println(data);
    }

    /**
     * 测试定时任务
     */
    @RequestMapping("TestStegetryTask")
    public void TestStegetryTask(){
        planManageService.startLampTaskWork();
    }

    /**
     * 获取日出日落时间
     */
    @RequestMapping("getSunRiseAndSunSet")
    public void getSunRiseAndSunSet(HttpServletResponse response,HttpServletRequest request) throws IOException {
        String orgCode = PlatformUtils.getLoginUserCode(request);
        Map<String,Object> dataMap = planManageService.getSunRiseAndSunSet(orgCode);
        String data = JSONArray.fromObject(dataMap).toString();
        response.getWriter().print(data);
    }




}
